@article{newman,
    author={Newman, M. E. J.}
    year={2000},
    title={The structure of scientific collaboration networks}
}

@article{inertia,
    author={Ramasco, J. and Morris, S.},
    year={2006},
    title={Social inertia in collaboration networks},
    journal={Physical Review}
}

@article{performance,
    author={Abbasi, A. an Altmann, J.},
    year={2011},
    title={On the Correlation between Research Performance and Social Network Analysis Applied to Research Collaboration Networks},
    journal={Proceedings of the 44th Hawaii International Conference on System Sciences}
}

@article{smol,
    author={Watts, D. and Strogatz, S,},
    year={1998},
    title={Collective dynamics of 'small-world' networks},
    journal={Nature}
}

@misc{Python,
    title={Python 3.6.5 documentation},
    howpublished={\url{https://docs.python.org/3/}},
    publisher={Python Software Foundation}
}

@misc{HadoopPseudoDistWiki,
    title={Hadoop: Setting up a Single Node Cluster},
    howpublished={\url{https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SingleCluster.html}},
    publisher={The Apache Software Foundation}
}

@misc{HadoopClusterWiki,
    title={Hadoop Cluster Setup Wiki},
    howpublished={\url{https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html}},
    publisher={The Apache Software Foundation}
}

@INPROCEEDINGS{macro_malware,
    author = {Sergio De los Santos and J{\`o}se Torres},
    title = {Macro Malware Detection using Machine Learning - A New Approach},
    year = {2017},
    month = {01},
    pages = {295--302},
    booktitle = {Proceedings of the 3rd International Conference on Information Systems Security and Privacy},
}

@article{android_malware,
    author={Karbab,EB and Debbabi,M. and Derhab,A. and Mouheb,D.},
    year={2018},
    title={MalDozer: Automatic framework for android malware detection using deep learning},
    journal={Digital Investigation},
    volume={24},
    pages={S48-S59},
    abstract={Android OS experiences a blazing popularity since the last few years. This predominant platform has established itself not only in the mobile world but also in the Internet of Things (IoT) devices. This popularity, however, comes at the expense of security, as it has become a tempting target of malicious apps. Hence, there is an increasing need for sophisticated, automatic, and portable malware detection solutions. In this paper, we propose MalDozer, an automatic Android malware detection and family attribution framework that relies on sequences classification using deep learning techniques. Starting from the raw sequence of the app's API method calls, MalDozer automatically extracts and learns the malicious and the benign patterns from the actual samples to detect Android malware. MalDozer can serve as a ubiquitous malware detection system that is not only deployed on servers, but also on mobile and even IoT devices. We evaluate MalDozer on multiple Android malware datasets ranging from 1 K to 33 K malware apps, and 38 K benign apps. The results show that MalDozer can correctly detect malware and attribute them to their actual families with an F1-Score of 96\%-99\% and a false positive rate of 0.06\%-2\%, under all tested datasets and settings. (c) 2018 The Author(s). Published by Elsevier Ltd on behalf of DFRWS.},
    keywords={Deep learning; COMPUTER SCIENCE, INTERDISCIPLINARY APPLICATIONS; COMPUTER SCIENCE, INFORMATION SYSTEMS; Malware; Mobile; Android; IoT},
    isbn={1742-2876},
    language={English}
}

@article{mal_ID,
    author={Tahan,G. and Rokach,L. and Shahar,Y.},
    year={2012},
    title={Mal-ID: Automatic Malware Detection Using Common Segment Analysis and Meta-Features},
    journal={Journal of Machine Learning Research},
    volume={13},
    pages={949-979},
    abstract={This paper proposes several novel methods, based on machine learning, to detect malware in executable files without any need for preprocessing, such as unpacking or disassembling. The basic method (Mal-ID) is a new static (form-based) analysis methodology that uses common segment analysis in order to detect malware files. By using common segment analysis, Mal-ID is able to discard malware parts that originate from benign code. In addition, Mal-ID uses a new kind of feature, termed meta-feature, to better capture the properties of the analyzed segments. Rather than using the entire file, as is usually the case with machine learning based techniques, the new approach detects malware on the segment level. This study also introduces two Mal-ID extensions that improve the Mal-ID basic method in various aspects. We rigorously evaluated Mal-ID and its two extensions with more than ten performance measures, and compared them to the highly rated boosted decision tree method under identical settings. The evaluation demonstrated that Mal-ID and the two Mal-ID extensions outperformed the boosted decision tree method in almost all respects. In addition, the results indicated that by extracting meaningful features, it is sufficient to employ one simple detection rule for classifying executable files.},
    keywords={ENSEMBLE; computer security; MALICIOUS EXECUTABLES; common segment analysis; MODELS; supervised learning; malware detection; CLASSIFICATION; AUTOMATION & CONTROL SYSTEMS; COMPUTER SCIENCE, ARTIFICIAL INTELLIGENCE},
    isbn={1532-4435},
    language={English}
}

@misc{pcode,
  author = {Bontchev, Vesselin},
  title = {pcodedmp},
  year = {2016},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/bontchev/pcodedmp}},
  commit = {ce62bb5cd84f9a85638702ae2c3574aa4d36d439}
}

 @phdthesis{Hall1998,
    address = {Hamilton, New Zealand},
    author = {M. A. Hall},
    school = {University of Waikato},
    title = {Correlation-based Feature Subset Selection for Machine Learning},
    year = {1998}
}

@INPROCEEDINGS{automated_malware, 
    author={R. Bearden and D. C. T. Lo}, 
    booktitle={2017 IEEE International Conference on Big Data (Big Data)}, 
    title={Automated microsoft Office Macro Malware Detection Using Machine Learning}, 
    year={2017}, 
    volume={}, 
    number={}, 
    pages={4448-4452}, 
    keywords={data mining;feature selection;invasive software;macros;nearest neighbour methods;pattern classification;word processing;K-Nearest Neighbors machine learning algorithm;MS Office file;Microsoft Office files;VBA macro code;automated microsoft office macro malware detection;automating macro malware detection;cybersecurity threat;document engineering;improved data mining methods;legitimate MS Office files;malicious documents;Classification algorithms;Feature extraction;Machine learning algorithms;Malware;Security;Testing;Microsoft Office;machine learning;macro;malware;p-code}, 
    doi={10.1109/BigData.2017.8258483}, 
    ISSN={}, 
    month={Dec},
}

@article{palmer_2018, 
    title={Hackers Using Recent Microsoft Office Vulnerabilities to Distribute Malware}, url={https://www.zdnet.com/article/hackers-are-using-recent-microsoft-office-vulnerabilities-to-distribute-malware/}, journal={ZDNet}, 
    author={Palmer, Danny}, 
    year={2018}, 
    month={Jan}
}

@Article{Kramer2010,
    author="Kramer, Simon
    and Bradfield, Julian C.",
    title="A General Definition of Malware",
    journal="Journal in Computer Virology",
    year="2010",
    month="May",
    day="01",
    volume="6",
    number="2",
    pages="105--114",
    abstract="We propose a general, formal definition of the concept of malware (malicious software) as a single sentence in the language of a certain modal logic. Our definition is general thanks to its abstract formulation, which, being abstract, is independent of---but nonetheless generally applicable to---the manifold concrete manifestations of malware. From our formulation of malware, we derive equally general and formal definitions of benware (benign software), anti-malware (``antibodies'' against malware), and medware (medical software or ``medicine'' for affected software). We provide theoretical tools and practical techniques for the detection, comparison, and classification of malware and its derivatives. Our general defining principle is causation of (in)correctness.",
    issn="1772-9904",
    doi="10.1007/s11416-009-0137-1",
    url="https://doi.org/10.1007/s11416-009-0137-1"
}

@misc{malware_example,
    title={Macro Malware}, 
    howpublished = {\url{https://www.microsoft.com/en-us/wdsi/threats/macro-malware}}, 
    publisher={Microsoft}
}